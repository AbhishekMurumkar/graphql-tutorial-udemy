# typedefinitions
type Subscription{
  count:Int!
  comment(postId:ID!):CommentSubscriptionPayload! # returning a comment that is just created.
  post:PostSubscriptionPayload!
}

type CommentSubscriptionPayload{
  mutation:String!
  data:Comment!
}

type PostSubscriptionPayload{
  mutation:String!
  data:Post!
}

type Mutation{
  createUser(data:CreateUserInput): User!
  createPost(data:CreatePostInput):Post!
  createComment(data:CreateCommentInput):Comment!
  deleteUser(userId:ID!):User!
  deletePost(postId:ID!):Post!
  deleteComment(commentId:ID!):Comment!,
  updateUser(userId:ID!,dataToUpdate:UpdateUserInput):User!
  updatePost(postId:ID!,dataToUpdate:UpdatePostInput):Post!
  updateComment(commentId:ID!,dataToUpdate:UpdateCommentInput):Comment!
}

input UpdateCommentInput{
  text:String
}

input UpdatePostInput{
  title:String
  body:String
  published:Boolean
}

input UpdateUserInput{
  name:String
  email:String
  age:Int
}

input CreateUserInput{
  name:String!
  email:String!
  age:Int
}

input CreatePostInput{
  title:String!
  body:String!
  published:Boolean!
  author:ID!
}

input CreateCommentInput{
  text:String!
  post:ID!
  author:ID!
}

type User{
 id: ID!
 name: String!
 email:String!
 age: Int,
 posts:[Post!]
 comments:[Comment]
} 
type Post{
  id:ID!
  title:String!
  body:String!
  published:Boolean!
  author:User! #relational data
  comments:[Comment]
}
type Comment{
  id:ID!,
  text:String!,
  author:User!
  post:Post!
}

type Query{
  me:User!
  users(queryName:String):[User!]! #fetch all authors of our application, note: This is a CUSTOM TYPED Array
  posts(queryTitleOrBody:String):[Post!]!
  comments:[Comment]
}